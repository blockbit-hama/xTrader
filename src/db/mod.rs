pub mod models;
pub mod repository;
pub mod async_commit;

use sqlx::sqlite::{SqlitePool, SqlitePoolOptions};
use sqlx::Error as SqlxError;

pub use async_commit::{AsyncCommitManager, CommitStats};

/// SQLite Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî Î∞è Ïó∞Í≤∞
pub async fn init_database(database_url: &str) -> Result<SqlitePool, SqlxError> {
    println!("üóÑÔ∏è  SQLite Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî Ï§ë...");

    // Ïó∞Í≤∞ ÌíÄ ÏÉùÏÑ±
    let pool = SqlitePoolOptions::new()
        .max_connections(5)
        .connect(database_url)
        .await?;

    // ÌÖåÏù¥Î∏î ÏÉùÏÑ±
    create_tables(&pool).await?;

    println!("‚úÖ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å");

    Ok(pool)
}

/// ÌïÑÏöîÌïú ÌÖåÏù¥Î∏î ÏÉùÏÑ±
async fn create_tables(pool: &SqlitePool) -> Result<(), SqlxError> {
    // Ï≤¥Í≤∞ ÎÇ¥Ïó≠ ÌÖåÏù¥Î∏î
    sqlx::query(
        "CREATE TABLE IF NOT EXISTS executions (
            exec_id TEXT PRIMARY KEY,
            taker_order_id TEXT NOT NULL,
            maker_order_id TEXT NOT NULL,
            symbol TEXT NOT NULL,
            side TEXT NOT NULL,
            price INTEGER NOT NULL,
            quantity INTEGER NOT NULL,
            taker_fee INTEGER NOT NULL,
            maker_fee INTEGER NOT NULL,
            transaction_time INTEGER NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )"
    )
    .execute(pool)
    .await?;

    // Ï£ºÎ¨∏ ÌÖåÏù¥Î∏î
    sqlx::query(
        "CREATE TABLE IF NOT EXISTS orders (
            order_id TEXT PRIMARY KEY,
            client_id TEXT NOT NULL,
            symbol TEXT NOT NULL,
            side TEXT NOT NULL,
            order_type TEXT NOT NULL,
            price INTEGER,
            quantity INTEGER NOT NULL,
            filled_quantity INTEGER DEFAULT 0,
            status TEXT NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )"
    )
    .execute(pool)
    .await?;

    // ÏûîÍ≥† ÌÖåÏù¥Î∏î
    sqlx::query(
        "CREATE TABLE IF NOT EXISTS balances (
            client_id TEXT PRIMARY KEY,
            asset TEXT NOT NULL,
            available INTEGER NOT NULL,
            locked INTEGER DEFAULT 0,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )"
    )
    .execute(pool)
    .await?;

    // Í∞êÏÇ¨ Î°úÍ∑∏ ÌÖåÏù¥Î∏î
    sqlx::query(
        "CREATE TABLE IF NOT EXISTS audit_logs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            event_type TEXT NOT NULL,
            entity_type TEXT NOT NULL,
            entity_id TEXT NOT NULL,
            details TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )"
    )
    .execute(pool)
    .await?;

    // Ïù∏Îç±Ïä§ ÏÉùÏÑ±
    sqlx::query("CREATE INDEX IF NOT EXISTS idx_executions_symbol ON executions(symbol)")
        .execute(pool)
        .await?;

    sqlx::query("CREATE INDEX IF NOT EXISTS idx_executions_time ON executions(transaction_time)")
        .execute(pool)
        .await?;

    sqlx::query("CREATE INDEX IF NOT EXISTS idx_orders_client ON orders(client_id)")
        .execute(pool)
        .await?;

    sqlx::query("CREATE INDEX IF NOT EXISTS idx_orders_symbol ON orders(symbol)")
        .execute(pool)
        .await?;

    println!("üìã ÌÖåÏù¥Î∏î ÏÉùÏÑ± ÏôÑÎ£å");

    Ok(())
}
